import org.apache.tools.ant.taskdefs.condition.Os
plugins {
  id 'com.github.spotbugs' version '6.0.4' apply false
  id "io.freefair.lombok" version "6.5.1" apply false
  id 'org.owasp.dependencycheck' version '9.0.7' apply false
}

ext {
  interlokCoreVersion = project.findProperty('interlokCoreVersion') ?: '4.9-SNAPSHOT'
  releaseVersion = project.findProperty('releaseVersion') ?: '4.9-SNAPSHOT'
  nexusBaseUrl = project.findProperty('nexusBaseUrl') ?: 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.findProperty('mavenPublishUrl') ?: nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.findProperty('repoUsername') ?: 'unknown'
  repoPassword = project.findProperty('repoPassword') ?: 'unknown'
  defaultNexusRepo = project.findProperty('defaultNexusRepo') ?: 'unknown'
  interlokJavadocs= project.findProperty('interlokJavadocs') ?: javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.findProperty('interlokCommonJavadocs') ?: javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '2.0.9'
  mockitoVersion = '4.9.0'
}

ext.gitBranchNameOrTimestamp = { branchName ->
  if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
    return new Date().format('HH:mm:ss z');
  }
  return branchName;
}

ext.buildInfo = { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
      return gitBranchNameOrTimestamp(branchName);
    }
}

// If graphviz is installed via scoop, plantuml doesn't find it because it's not
// in its expected "location(s)" it searches for c:\*\graphviz**\dot.exe
// so windows we'd expect to have the GRAPHVIZ_DOT env defined 
// On Linux we should be able to find it via the path.
ext.hasGraphViz = { ->
  def app = "dot"
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    app = app + ".exe"
  }
  return System.getenv("GRAPHVIZ_DOT") !=null ||  System.getenv("PATH").split(File.pathSeparator).any{
    java.nio.file.Paths.get("${it}").resolve(app).toFile().exists()
  }
}

task clean(type: Delete) {
  delete project.buildDir
}

allprojects {
  tasks.withType(Jar) {
    metaInf {
      from ("$rootDir") {
        include 'LICENSE*'
        include 'NOTICE*'
      }
    }
  }
  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'jacoco'
  apply plugin: "io.freefair.lombok"
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'org.owasp.dependencycheck'

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
  group   = 'com.adaptris'
  version = releaseVersion
  def versionDir = "$buildDir/version"
  lombok.disableConfig = true

  repositories {
    mavenCentral()
    if (defaultNexusRepo != "unknown") {
      maven {
        url "$defaultNexusRepo"
        allowInsecureProtocol true
      }
    }
    maven { url "$nexusBaseUrl/content/groups/public" }
    maven { url "$nexusBaseUrl/content/groups/interlok" }
  }

  configurations {
    javadoc {}
    offlineJavadocPackages {}
    umlDoclet {}
    all*.exclude group: 'c3p0'
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'javamail'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'org.glassfish.hk2.external'
    all*.exclude group: 'xalan', module: 'xalan'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    all*.exclude group: 'org.codehaus.woodstox'
    all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
    all*.exclude group: 'com.fasterxml.woodstox'
    // INTERLOK-3197 exclude old javax.mail
    all*.exclude group: 'com.sun.mail', module: 'javax.mail'
    all*.exclude group: 'javax.validation', module: 'validation-api'
    all*.exclude group: 'javax.activation', module: 'activation'
    all*.exclude group: 'javax.activation', module: 'javax.activation-api'
    // Remove some guava dependencies
    all*.exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
    all*.exclude group: 'com.google.j2objc', module: 'j2objc-annotations'
    all*.exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
    all*.exclude group: 'org.checkerframework', module: 'checker-compat-qual'
    all*.exclude group: 'com.google.findbugs', module: 'jsr305'

    // INTERLOK-3740 switch from jcraft to com.github.mwiede jsch fork.
    all*.exclude group: 'com.jcraft', module: 'jsch'
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
  }

  dependencies {
    api ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
    api ("com.adaptris:interlok-common:$interlokCoreVersion") { changing= true}
    implementation ("org.slf4j:slf4j-api:$slf4jVersion")

    annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing=true}
    testImplementation ('junit:junit:4.13.2')
    testImplementation ("org.slf4j:slf4j-simple:$slf4jVersion")
    testImplementation ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing= true }
    testImplementation ("org.mockito:mockito-core:$mockitoVersion")
    testImplementation ("org.mockito:mockito-inline:$mockitoVersion")

    javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
    offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar") { changing= true}
    offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar") { changing= true}
    umlDoclet("nl.talsmasoftware:umldoclet:2.1.1")
  }

  sourceSets {
    main {
      output.dir(versionDir, builtBy: 'generateVersion')
    }
  }
  // Generate the META-INF/adaptris-version file
  task generateVersion {
    doLast {
      def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
      versionFile.getParentFile().mkdirs()
      ant.propertyfile(file: versionFile) {
        entry(key: 'component.name', value: componentName)
        entry(key: 'component.description', value: componentDesc)
        entry(key: 'groupId', value: project.group)
        entry(key: 'artifactId', value: project.name)
        entry(key: 'build.version', value: releaseVersion)
        entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
        entry(key: 'build.info', value: buildInfo())
      }
    }
  }

  task offlinePackageList(type: Copy) {
    description 'Build an offline package-list for javadocs'
    group 'Documentation'

    project.configurations.offlineJavadocPackages.collect { dependency ->
      from(zipTree(dependency)) {
        into dependency.name
      }
    }
    include "package-list"
    include "element-list"
    into offlineJavadocPackageDir
  }

  javadoc {
    onlyIf {
      !hasGraphViz()
    }
    configure(options) {
      options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
      options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
      taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
      options.addStringOption "tagletpath", configurations.javadoc.asPath
      options.addBooleanOption "-no-module-directories", true
      options.addStringOption "Xdoclint:none", "-quiet"
    }
  }

  task umlJavadoc(type: Javadoc) {
    group 'Documentation'
    description 'Build javadocs using plantuml + graphviz + umldoclet, if dot is available'

    onlyIf {
      hasGraphViz()
    }
    source = sourceSets.main.extensions.delombokTask
    classpath = project.sourceSets.main.compileClasspath
    configure(options) {
      options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
      options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
      taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
      options.addStringOption "tagletpath", configurations.javadoc.asPath
      options.addBooleanOption "-no-module-directories", true
      options.addStringOption "Xdoclint:none", "-quiet"
      options.docletpath = configurations.umlDoclet.files.asType(List)
      options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
      // Create class & package use pages
      options.addStringOption "use"    
      options.addStringOption "umlImageFormat", "SVG"
      options.addStringOption "umlExcludedTypeReferences", "java.lang.Exception,java.lang.Object,java.lang.Enum,java.lang.annotation.Annotation"
      options.addStringOption "umlJavaBeanPropertiesAsFields"
      options.addBooleanOption "failOnCyclicPackageDependencies", false
    }
  }

  jacocoTestReport {
    reports {
        xml.required= true
        html.required= true
    }
  }

  spotbugsMain {
    effort = com.github.spotbugs.snom.Effort.valueOf("MAX")
    reportLevel = com.github.spotbugs.snom.Confidence.valueOf("HIGH")
    reports {
      xml {
        required.set(false)
      }
      html {
        required.set(true)
        stylesheet = 'default.xsl'
      }
    }
  }

  dependencyCheck  {
    suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
    scanConfigurations = [ "api", "compileClasspath", "runtimeClasspath" ]
    formats = [ "HTML", "JUNIT" ]
    junitFailOnCVSS = 7.0
    failBuildOnCVSS = 7.0
    analyzers {
      assemblyEnabled=false
      knownExploitedURL=project.findProperty('dependencyCheckKnownExploitedURL')
    }
  }

  // disable spotbugsTests which checks our test code..
  spotbugsTest.enabled = false

  task lgtmCompile(type: JavaCompile, dependsOn: delombok) {
    group 'Build'
    description 'Compile for lgtm'

    source = sourceSets.main.extensions.delombokTask
    destinationDirectory= sourceSets.main.java.classesDirectory
    classpath = project.sourceSets.main.compileClasspath
  }
  
  lombok {
    version = "1.18.22"
  }
  
  check.dependsOn jacocoTestReport
  javadoc.dependsOn offlinePackageList, umlJavadoc
}
