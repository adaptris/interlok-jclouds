ext {
  componentName='Interlok JClouds/Common'
  componentDesc="Common classes for interacting with cloud providers via Apache JClouds"
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  jcloudsVersion = '2.6.0'
}

dependencies {
  api ("org.apache.jclouds:jclouds-core:$jcloudsVersion")
  api ("com.google.guava:guava:33.0.0-jre")
  testImplementation "org.apache.jclouds.api:filesystem:$jcloudsVersion"
}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}

artifacts {
  archives javadocJar
  archives sourcesJar
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }
      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.10.2+")
        properties.appendNode("tags", "jclouds")
        properties.appendNode("license", "false")
        properties.appendNode("externalUrl", "https://jclouds.apache.org/")
        properties.appendNode("readme", "https://github.com/adaptris/interlok-jclouds/raw/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-jclouds")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete delombokTargetDir
}

clean.dependsOn deleteGeneratedFiles
javadoc.dependsOn offlinePackageList
